{"ast":null,"code":"import _objectSpread from \"/Users/rui/Desktop/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyC0PFI1ZVfM2wY02UVLRNLn82YAffmA4uU\",\n  authDomain: \"crwn-db-c5d37.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-c5d37.firebaseio.com\",\n  projectId: \"crwn-db-c5d37\",\n  storageBucket: \"\",\n  messagingSenderId: \"334176451050\",\n  appId: \"1:334176451050:web:b1375489bfc49d95\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get(); //get the corresponding data for the reference\n\n  if (!snapShot.exists) {\n    //if the user doesn't exist, create a user in the database\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch(); //used to group all our calls together into one big request, incase our request is stopped halfway\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //get a new document reference in this collection and randomly generate the ID (documents at an empty string)\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit(); //return null\n}; //Array of objects -> map with routing property\n//param: collectionSnapshot\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); //make collection.title.toLowerCase() as index, and collection value as the value\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/rui/Desktop/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyC0PFI1ZVfM2wY02UVLRNLn82YAffmA4uU\",\n    authDomain: \"crwn-db-c5d37.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-c5d37.firebaseio.com\",\n    projectId: \"crwn-db-c5d37\",\n    storageBucket: \"\",\n    messagingSenderId: \"334176451050\",\n    appId: \"1:334176451050:web:b1375489bfc49d95\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData ) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    \n    const snapShot = await userRef.get();    //get the corresponding data for the reference\n\n    if(!snapShot.exists){     //if the user doesn't exist, create a user in the database\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch (error) {\n            console.log('error creating user', error.message);\n        }\n    }\n    \n    return userRef;\n}\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    const batch = firestore.batch();  //used to group all our calls together into one big request, incase our request is stopped halfway\n\n    objectsToAdd.forEach(obj => {\n      const newDocRef = collectionRef.doc(); //get a new document reference in this collection and randomly generate the ID (documents at an empty string)\n      batch.set(newDocRef, obj);\n    });\n  \n    return await batch.commit();  //return null\n};\n\n//Array of objects -> map with routing property\n//param: collectionSnapshot\nexport const convertCollectionsSnapshotToMap = collections => {\n    \n    const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n  \n    return {\n        routeName: encodeURI(title.toLowerCase()),\n        id: doc.id,\n        title,\n        items\n      };\n    });\n\n    //make collection.title.toLowerCase() as index, and collection value as the value\n    return transformedCollection.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    }, {});\n} \n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}