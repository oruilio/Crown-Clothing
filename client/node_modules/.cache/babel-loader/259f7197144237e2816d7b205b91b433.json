{"ast":null,"code":"import _slicedToArray from \"/Users/rui/Desktop/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rui/Desktop/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport './sign-in.styles.scss';\n\nconst SignIn = () => {\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const emailSignInStart = this.props.emailSignInStart;\n    const _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  const googleSignInStart = this.props.googleSignInStart;\n  return React.createElement(\"div\", {\n    className: \"sign-in\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \" Sign in with your email and password\"), React.createElement(\"form\", {\n    onSubmit: this.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: this.state.email,\n    handleChange: this.handleChange,\n    label: \"email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: this.state.password,\n    handleChange: this.handleChange,\n    label: \"password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \" Sign in \"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Sign in with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/rui/Desktop/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","email","password","userCredentials","setCredentials","handleSubmit","event","preventDefault","props","state","handleChange","target","value","name","setState","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {connect} from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nimport './sign-in.styles.scss';\n\nconst  SignIn = () => {\n    const [userCredentials, setCredentials] = useState({email: '', password: ''});\n    \n\n    const handleSubmit = async event => {\n        event.preventDefault();\n        const { emailSignInStart } = this.props\n        const { email, password } = this.state;\n\n        emailSignInStart(email, password);\n        \n    }\n\n    const handleChange = event => {\n        const { value, name } = event.target\n        this.setState({ [name]: value })\n    }\n\n    \n    const { googleSignInStart } = this.props;\n\n    return(\n        <div className ='sign-in'>\n            <h2>I already have an account</h2>\n            <span> Sign in with your email and password</span>\n\n            <form onSubmit = {this.handleSubmit}>\n                <FormInput name=\"email\" \n                    type=\"email\" \n                    value={this.state.email} \n                    handleChange={this.handleChange}\n                    label=\"email\"\n                    required \n                />\n    \n                <FormInput name=\"password\" \n                    type=\"password\" \n                    value={this.state.password} \n                    handleChange={this.handleChange}\n                    label=\"password\"\n                    required \n                />\n                <div className='buttons'>\n                    <CustomButton type='submit'> Sign in </CustomButton>\n                    <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn> \n                        Sign in with Google \n                    </CustomButton>\n                </div>\n\n            </form>\n        </div>\n\n    )\n    \n}\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password}))\n})\n\nexport default connect(null,mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}