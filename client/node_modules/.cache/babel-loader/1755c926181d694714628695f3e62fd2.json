{"ast":null,"code":"import _objectSpread from \"/Users/rui/Desktop/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/rui/Desktop/crwn-clothing/src/App.js\";\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport './App.css';\nimport Header from './components/header/header.component';\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport SignInAndSignOutPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport { auth, createUserProfileDocument\n/*, addCollectionAndDocuments*/\n} from './firebase/firebase.utils';\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selectors'; //import { selectCollectionsForPreview } from './redux/shop/shop.selectors';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubsribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const setCurrentUser = this.props.setCurrentUser; //param userAuth comes from firebase, meaning sb login, onAuthStateChanged is an open function, so we need to close it when the app unmount\n\n    this.unsubsribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth); //to check whether our database has updated at userRef with any new data\n        //keep listening\n\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser(_objectSpread({\n            id: snapShot.id\n          }, snapShot.data()));\n        });\n      } else {\n        setCurrentUser(userAuth);\n      } //execute only one time\n      //addCollectionAndDocuments('collections', collectionsArray.map(({title, items}) => ({title, items})));\n\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubsribeFromAuth();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }) : React.createElement(SignInAndSignOutPage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser //collectionsArray: selectCollectionsForPreview\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/rui/Desktop/crwn-clothing/src/App.js"],"names":["React","Switch","Route","Redirect","connect","createStructuredSelector","Header","HomePage","ShopPage","SignInAndSignOutPage","CheckoutPage","auth","createUserProfileDocument","setCurrentUser","selectCurrentUser","App","Component","unsubsribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport './App.css';\n\nimport Header from './components/header/header.component';\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport SignInAndSignOutPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'\nimport CheckoutPage from './pages/checkout/checkout.component';\n\nimport { auth, createUserProfileDocument/*, addCollectionAndDocuments*/ } from './firebase/firebase.utils';\nimport { setCurrentUser} from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selectors';\n//import { selectCollectionsForPreview } from './redux/shop/shop.selectors';\n\nclass App extends React.Component {\n  \n  unsubsribeFromAuth = null;\n\n  componentDidMount(){\n    const {setCurrentUser /*, collectionsArray*/ } = this.props;\n\n    //param userAuth comes from firebase, meaning sb login, onAuthStateChanged is an open function, so we need to close it when the app unmount\n    this.unsubsribeFromAuth = auth.onAuthStateChanged( async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        \n        //to check whether our database has updated at userRef with any new data\n        //keep listening\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n        });\n      }\n      else{\n        setCurrentUser(userAuth);\n      }\n      //execute only one time\n      //addCollectionAndDocuments('collections', collectionsArray.map(({title, items}) => ({title, items})));\n    })\n  }\n\n  componentWillUnmount(){\n    this.unsubsribeFromAuth();\n  }\n\n  render(){\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route path='/checkout' component={CheckoutPage} />\n          <Route exact path='/signin' render={ \n            () => this.props.currentUser ? ( \n            <Redirect to='/' /> \n            ) : (\n            <SignInAndSignOutPage /> ) } \n          />\n        </Switch>\n      </div>\n    );\n  }\n  \n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  //collectionsArray: selectCollectionsForPreview\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}